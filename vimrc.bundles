if &compatible
  set nocompatible
end

" Shim command and function to allow migration from Vundle to vim-plug.
function! VundleToPlug(vundle_command, arg, ...)
  echom "You are using Vundle's `".a:vundle_command."` command to declare plugins. Dotfiles now uses vim-plug for plugin mangagement. Please rename uses of `".a:vundle_command."` to `Plug`. Plugin was '".a:arg."'."
  let vim_plug_options = {}

  if a:0 > 0
    if has_key(a:1, 'name')
      let name = a:1.name
      let vim_plug_options.dir = "$HOME/.vim/bundle/".a:1.name
    endif

    if has_key(a:1, 'rtp')
      let vim_plug_options.rtp = a:1.rtp
    endif
  endif

  Plug a:arg, vim_plug_options
endfunction

com! -nargs=+  -bar Plugin call VundleToPlug("Plugin", <args>)
com! -nargs=+  -bar Bundle call VundleToPlug("Bundle", <args>)

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'pbrisbin/vim-mkdir'            " Make missing directories for buffers
Plug 'scrooloose/syntastic'          " Syntax checking
Plug 'tpope/vim-fugitive'            " Git wrapper
Plug 'scrooloose/nerdtree'           " File browser
Plug 'vim-scripts/tComment'          " Comment with gcc
Plug 'airblade/vim-gitgutter'        " Diff markers in gutter
Plug 'chriskempson/base16-vim'       " Color scheme
Plug 'justinmk/vim-sneak'            " Better search via `s`
" Plug 'w0rp/ale'                      " Lint engine
Plug 'machakann/vim-highlightedyank' " Highlight yanked line
Plug 'andymass/vim-matchup'          " Match pairs support
Plug 'airblade/vim-rooter'           " Define the root of the project
Plug 'ncm2/ncm2'                     " Completion manager
Plug 'roxma/nvim-yarp'               " Used with ncm2 plugins
Plug 'ncm2/ncm2-bufword'             " Completion for words in current buffer
Plug 'ncm2/ncm2-path'                " Completion for paths
Plug 'cespare/vim-toml'              " TOML syntax highlighting
Plug 'rust-lang/rust.vim'            " Rust
Plug 'godlygeek/tabular'             " Align rows based on delimiter
Plug 'plasticboy/vim-markdown'       " Markdown syntax

" Language client and fuzzy finding
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'


" Linter

" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F6> :call LanguageClient#textDocument_rename()<CR>



if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
